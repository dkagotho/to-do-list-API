"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@curveball/core");
const http_errors_1 = require("@curveball/http-errors");
const http_1 = __importDefault(require("http"));
class Controller {
    constructor() {
        this.autoAnnotateHttpMethods();
        this.createRouteTable();
    }
    /**
     * Returns a list of allowed HTTP methods for this controller.
     */
    allowedMethods() {
        return Array.from(this.routeTable.keys());
    }
    /**
     * The default implementation of the HTTP OPTIONS requests automatically
     * responds with an empty body an an Allow header
     */
    options(ctx) {
        ctx.response.headers.set('Allow', this.allowedMethods());
    }
    /**
     * Handle Websocket requests
     */
    webSocket(ctx) {
        throw new http_errors_1.BadRequest('Websocket connections are not supported at this endpoint');
    }
    /**
     * This middlewareCall symbol is a special function that marks
     * an object as a curveball middleware.
     *
     * This function will be called by curveball when it's added to
     * the middleware stack with use().
     */
    [core_1.middlewareCall](ctx) {
        return this.dispatch(ctx);
    }
    /**
     * This is the main request handler.
     *
     * It takes a context and figures out which controller method
     * to call, and then calls it.
     */
    dispatch(ctx) {
        const method = ctx.request.method;
        if (!http_1.default.METHODS.includes(method)) {
            throw new http_errors_1.NotImplemented(method + ' is not implemented');
        }
        if (isWsContext(ctx)) {
            return this.webSocket(ctx);
        }
        if (!this.routeTable.has(method)) {
            throw new http_errors_1.MethodNotAllowed(method + ' is not allowed', this.allowedMethods());
        }
        const route = this.routeTable.get(method);
        const acceptsMimeTypes = Array.from(route.accepts.keys());
        const acceptsResult = ctx.accepts(...acceptsMimeTypes);
        if (!acceptsResult || !route.accepts.has(acceptsResult)) {
            if (!route.default) {
                throw new http_errors_1.NotAcceptable('The mimeType specified in the Accept header is not supported. The following mimetypes are supported here: ' + acceptsMimeTypes.join(', '));
            }
            else {
                return this[route.default](ctx);
            }
        }
        else {
            return this[route.accepts.get(acceptsResult)](ctx);
        }
    }
    /**
     * For any methods on a controller that are identical in name to a HTTP
     * method, we pretend that these methods had a `@method('FOO')` annotation.
     */
    autoAnnotateHttpMethods() {
        if (!this.annotations) {
            this.annotations = new Map();
        }
        for (const httpMethod of http_1.default.METHODS) {
            const method = httpMethod.toLowerCase();
            if (typeof this[method] === 'function') {
                if (!this.annotations.has(method)) {
                    this.annotations.set(method, [{ name: 'method', args: [httpMethod] }]);
                }
                else {
                    let hasAnnotation = false;
                    // Only add a method annotation if it didn't already exist.
                    for (const annotation of this.annotations.get(method)) {
                        if (annotation.name === 'method') {
                            hasAnnotation = true;
                        }
                    }
                    if (!hasAnnotation) {
                        this.annotations.get(method).push({
                            name: 'method',
                            args: [httpMethod]
                        });
                    }
                }
            }
        }
    }
    /**
     * This method uses the information from annotations to create
     * routes
     */
    createRouteTable() {
        this.routeTable = new Map();
        for (const [controllerMethod, annotations] of this.annotations) {
            const accepts = [];
            let method = null;
            for (const annotation of annotations) {
                switch (annotation.name) {
                    case 'method':
                        method = annotation.args[0];
                        break;
                    case 'accept':
                        accepts.push(annotation.args[0]);
                        break;
                }
            }
            if (method === null) {
                throw new Error('Controller method ' + controllerMethod + ' was annotated, but it needs a @method annotation to actually do anything');
            }
            if (!this.routeTable.has(method)) {
                this.routeTable.set(method, {
                    accepts: new Map(),
                    default: null
                });
            }
            const route = this.routeTable.get(method);
            if (accepts.length === 0) {
                route.default = controllerMethod;
            }
            else {
                for (const mime of accepts) {
                    if (mime === '*') {
                        route.default = controllerMethod;
                    }
                    else {
                        route.accepts.set(mime, controllerMethod);
                    }
                }
            }
        }
    }
}
exports.default = Controller;
function isWsContext(ctx) {
    return ctx.webSocket !== undefined;
}
//# sourceMappingURL=controller.js.map
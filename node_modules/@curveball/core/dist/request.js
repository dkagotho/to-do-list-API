"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Request = void 0;
const accepts = require("accepts");
const url = require("url");
const header_helpers_1 = require("./header-helpers");
const headers_1 = require("./headers");
/**
 * This interface represents an incoming server request.
 */
class Request {
    constructor(method, requestTarget) {
        this.method = method;
        this.requestTarget = requestTarget;
        this.headers = new headers_1.Headers();
    }
    /**
     * path-part of the request.
     *
     * For example /hello/world
     */
    get path() {
        return url.parse(this.requestTarget).pathname;
    }
    /**
     * Sets the request path
     */
    set path(value) {
        this.requestTarget = value;
    }
    /**
     * This object contains parsed query parameters.
     */
    get query() {
        return url.parse(this.requestTarget, true).query;
    }
    /**
     * Returns the value of the Content-Type header, with any additional
     * parameters such as charset= removed.
     *
     * If there was no Content-Type header, an empty string will be returned.
     */
    get type() {
        const type = this.headers.get('content-type');
        if (!type) {
            return '';
        }
        return type.split(';')[0];
    }
    /**
     * accepts is used for negotation the Content-Type with a client.
     *
     * You can pass a content-type, or an array of content-types.
     * The Content-Types you provide are a list of types your application
     * supports.
     *
     * This function will then return the best possible type based on the Accept
     * header.
     *
     * If no compatible types are found, this function returns null.
     */
    accepts(...types) {
        const mockRequestObj = {
            headers: {
                accept: this.headers.get('Accept')
            }
        };
        const result = accepts(mockRequestObj).type(types);
        return result === false ? null : result;
    }
    /**
     * This method will return true or false if a Request or Response has a
     * Content-Type header that matches the argument.
     *
     * For example, if the Content-Type header has the value: application/hal+json,
     * then the arguments will all return true:
     *
     * * application/hal+json
     * * application/json
     * * hal+json
     * * json
     * * application/*
     */
    is(type) {
        return header_helpers_1.is(this, type);
    }
    prefer(preference) {
        const prefer = header_helpers_1.parsePrefer(this.headers.get('Prefer'));
        const val = prefer[preference];
        if (val === undefined) {
            return false;
        }
        return val;
    }
}
exports.Request = Request;
exports.default = Request;
//# sourceMappingURL=request.js.map
/// <reference types="node" />
import { EventEmitter } from 'events';
import * as http from 'http';
import { Context } from './context';
import { HeadersInterface, HeadersObject } from './headers';
import { HttpCallback, NodeHttpRequest, NodeHttpResponse } from './node/http-utils';
import Request from './request';
import Response from './response';
import * as WebSocket from 'ws';
import * as net from 'net';
/**
 * The middleware-call Symbol is a special symbol that might exist as a
 * property on an object.
 *
 * If it exists, the object can be used as a middleware.
 */
declare const middlewareCall: unique symbol;
export { middlewareCall };
/**
 * A function that can act as a middleware.
 */
declare type MiddlewareFunction = (ctx: Context, next: () => Promise<void>) => Promise<void> | void;
declare type MiddlewareObject = {
    [middlewareCall]: MiddlewareFunction;
};
export declare type Middleware = MiddlewareFunction | MiddlewareObject;
export declare function invokeMiddlewares(ctx: Context, fns: Middleware[]): Promise<void>;
export default class Application extends EventEmitter {
    middlewares: Middleware[];
    private wss;
    /**
     * Add a middleware to the application.
     *
     * Middlewares are called in the order they are added.
     */
    use(...middleware: Middleware[]): void;
    /**
     * Handles a single request and calls all middleware.
     */
    handle(ctx: Context): Promise<void>;
    /**
     * Starts a HTTP server on the specified port.
     */
    listen(port: number, host?: string): http.Server;
    listenWs(port: number, host?: string): WebSocket.Server;
    /**
     * This function is a callback that can be used for Node's http.Server,
     * https.Server, or http2.Server.
     */
    callback(): HttpCallback;
    /**
     * This callback can be used to tie to the Node.js Http(s/2) server 'upgrade' event'.
     *
     * It's used to facilitate incoming Websocket requests
     */
    upgradeCallback(request: http.IncomingMessage, socket: net.Socket, head: Buffer): void;
    /**
     * Does a sub-request based on a Request object, and returns a Response
     * object.
     */
    subRequest(method: string, path: string, headers?: HeadersInterface | HeadersObject, body?: any): Promise<Response>;
    subRequest(request: Request): Promise<Response>;
    /**
     * Creates a Context object based on a node.js request and response object.
     */
    buildContextFromHttp(req: NodeHttpRequest, res: NodeHttpResponse): Context;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemoryRequest = void 0;
const stream_1 = require("stream");
const headers_1 = require("./headers");
const request_1 = require("./request");
class MemoryRequest extends request_1.Request {
    constructor(method, requestTarget, headers, body = null) {
        super(method, requestTarget);
        if (headers && headers.get !== undefined) {
            this.headers = headers;
        }
        else {
            this.headers = new headers_1.Headers(headers);
        }
        this.originalBody = body;
        // @ts-expect-error Typescript doesn't like null here because it might be
        // incompatible with T, but we're ignoring it as it's a good default.
        this.body = null;
    }
    async rawBody(encoding, limit) {
        return this.getBody(encoding);
    }
    /**
     * getStream returns a Node.js readable stream.
     *
     * A stream can typically only be read once.
     */
    getStream() {
        const s = new stream_1.Readable();
        s.push(this.getBody());
        s.push(null);
        return s;
    }
    getBody(encoding) {
        if (!this.originalBody) {
            // Memoizing the null case
            this.originalBody = '';
        }
        if (typeof this.originalBody === 'object' && !(this.originalBody instanceof Buffer)) {
            // Memoizing the JSON object case.
            this.originalBody = JSON.stringify(this.originalBody);
        }
        if (this.originalBody instanceof Buffer) {
            // The buffer case
            if (typeof encoding === 'undefined') {
                return this.originalBody;
            }
            else {
                return this.originalBody.toString(encoding);
            }
        }
        else {
            // The string case
            if (typeof encoding === 'undefined') {
                return Buffer.from(this.originalBody);
            }
            else {
                return this.originalBody;
            }
        }
    }
}
exports.MemoryRequest = MemoryRequest;
exports.default = MemoryRequest;
//# sourceMappingURL=memory-request.js.map
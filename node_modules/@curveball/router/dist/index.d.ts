import { Middleware } from '@curveball/core';
import './declarations';
declare type DispatcherFunc = (mw: Middleware, ...mws: Middleware[]) => Dispatcher;
declare type Methods = 'delete' | 'get' | 'head' | 'options' | 'patch' | 'post' | 'put';
declare type Dispatcher = Record<Methods, DispatcherFunc> & Middleware;
/**
 * The route function creates a route middleware.
 *
 * Pass a path and a middleware. The passed midldleware will be called if the
 * path matched.
 *
 * Example:
 *
 * app.use(route('/foo/bar', (ctx, next) => {
 *
 *   // This middleware will get called if the route matched.
 *
 * });
 */
export default function route(path: string, middleware: Middleware, ...middlewares: Middleware[]): Middleware;
export default function route(path: string): Dispatcher;
export {};
